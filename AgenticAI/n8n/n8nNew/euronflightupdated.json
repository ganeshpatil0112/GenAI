{
  "name": "My workflow 17",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ],
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.2,
      "position": [
        -832,
        -240
      ],
      "id": "0247ff73-4fb0-440d-83a1-cff40e70d346",
      "name": "Telegram Trigger",
      "webhookId": "9f9cff0d-1c4c-40e6-84a4-aa2396806f57",
      "credentials": {
        "telegramApi": {
          "id": "Th2q5wcF5oxjmCVG",
          "name": "Telegram account 4"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Extract flight search parameters from this message:\n\n\"{{ $json.choices[0].message.content }}\"\n\nReturn exactly one JSON object following the System message rules and schema above.",
        "hasOutputParser": true,
        "options": {
          "systemMessage": "You are a flight search parameter extractor for a Telegram bot.\n\nYour job: Read a short user message and return exactly ONE JSON object representing the payload for the Amadeus Flight Offers Search API.\n\n---\n\n### Behavior Rules\n\n1. **Primary Goal**\n   - Always output a *complete Amadeus API payload* in valid JSON format, like:\n     {\n       \"status\": \"ready\",\n       \"payload\": {\n         \"originLocationCode\": \"DEL\",\n         \"destinationLocationCode\": \"BOM\",\n         \"departureDate\": \"2025-10-15\",\n         \"adults\": 1,\n         \"nonStop\": false,\n         \"max\": 5,\n         \"currency\": \"INR\"\n       }\n     }\n\n2. **Defaults**\n   - adults = 1  \n   - nonStop = false  \n   - max = 5  \n   - currency = \"INR\"\n\n3. **If the user gives city names (not IATA codes):**\n   - Try to infer the correct 3-letter IATA codes using standard airport mappings (e.g., \"Delhi\" → \"DEL\", \"Mumbai\" → \"BOM\").\n   - Set `needs_iata_resolution: false` since you resolved it automatically.\n\n4. **If the user mentions “return” or “round trip”:**\n   - Add `\"returnDate\"` and include it in the payload.\n   - Example:\n     {\n       \"originLocationCode\": \"DEL\",\n       \"destinationLocationCode\": \"BOM\",\n       \"departureDate\": \"2025-11-10\",\n       \"returnDate\": \"2025-11-15\",\n       \"adults\": 1,\n       \"currency\": \"INR\"\n     }\n\n5. **Date Parsing**\n   - Accept natural language like \"today\", \"tomorrow\", \"next Friday\".\n   - Convert to ISO format (YYYY-MM-DD) in **Asia/Kolkata (IST)** timezone.\n   - If the date is unclear or in the past, politely ask for clarification:\n     {\n       \"status\": \"ask_user\",\n       \"message_to_user\": \"Please confirm the travel date in YYYY-MM-DD format (e.g., 2025-11-10).\"\n     }\n\n6. **If any required field is missing (origin, destination, date):**\n   - Output:\n     {\n       \"status\": \"ask_user\",\n       \"message_to_user\": \"Please provide your origin, destination, and travel date. Example: 'Flight from Delhi to Mumbai on 2025-11-10'\"\n     }\n\n7. **Output Formatting**\n   - Always return ONLY JSON.\n   - Do not include explanations or text outside JSON.\n   - All IATA codes must be uppercase.\n   - Trim spaces in all inputs.\n\n---\n\n### Examples\n\n**Input:**  \n\"Ahmedabad to Delhi on 2025-11-10 for 2 adults and 2 kids\"\n\n**Output:**  \n{\n  \"status\": \"ready\",\n  \"payload\": {\n    \"originLocationCode\": \"AMD\",\n    \"destinationLocationCode\": \"DEL\",\n    \"departureDate\": \"2025-11-10\",\n    \"adults\": 2,\n    \"children\": 2,\n    \"nonStop\": false,\n    \"max\": 5,\n    \"currency\": \"INR\"\n  }\n}\n\n---\n\n**Input:**  \n\"Need flight from London to Paris tomorrow\"\n\n**Output:**  \n{\n  \"status\": \"ready\",\n  \"payload\": {\n    \"originLocationCode\": \"LON\",\n    \"destinationLocationCode\": \"PAR\",\n    \"departureDate\": \"2025-10-06\",\n    \"adults\": 1,\n    \"nonStop\": false,\n    \"max\": 5,\n    \"currency\": \"INR\"\n  }\n}\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -432,
        -128
      ],
      "id": "78289aab-ddd7-468c-ae66-d80433435df6",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -528,
        96
      ],
      "id": "6b0a2fd2-f477-4d67-82ef-c1b90c6c60d0",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "4W7yUiQj5Aoecl9G",
          "name": "OpenAi account 7"
        }
      }
    },
    {
      "parameters": {
        "jsonSchemaExample": "{\n  \"status\": \"ok\",\n  \"flight_search_payload\": {\n    \"originLocationCode\": \"DEL\",\n    \"destinationLocationCode\": \"BOM\",\n    \"departureDate\": \"2025-10-15\",\n    \"adults\": 1,\n    \"currencyCode\": \"INR\",\n    \"nonStop\": false,\n    \"max\": 5\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -272,
        96
      ],
      "id": "8756dc16-2a38-43c0-bcfc-918c8c379af2",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "bd09d66c-4e03-4fb9-894f-f6132b27655b",
              "leftValue": "={{ $json.output.status }}",
              "rightValue": "ask_user",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -112,
        -64
      ],
      "id": "fe2b9ffd-dedc-4f5b-b5ce-a1ad27ce4dbe",
      "name": "If"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "give me more detailes about your query",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        160,
        -288
      ],
      "id": "146d6c31-28da-40b5-81df-f4c644f69300",
      "name": "Send a text message",
      "webhookId": "eba01aac-5c92-416d-ae97-8ffe53fa67aa",
      "credentials": {
        "telegramApi": {
          "id": "Th2q5wcF5oxjmCVG",
          "name": "Telegram account 4"
        }
      }
    },
    {
      "parameters": {
        "url": "https://test.api.amadeus.com/v2/shopping/flight-offers",
        "authentication": "genericCredentialType",
        "genericAuthType": "oAuth2Api",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "originLocationCode",
              "value": "={{ $json.output.flight_search_payload.originLocationCode }}"
            },
            {
              "name": "destinationLocationCode",
              "value": "={{ $json.output.flight_search_payload.destinationLocationCode }}"
            },
            {
              "name": "adults",
              "value": "={{ $json.output.flight_search_payload.adults }}"
            },
            {
              "name": "departureDate",
              "value": "={{ $json.output.flight_search_payload.departureDate }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        96,
        32
      ],
      "id": "c72386b0-54ef-4ce9-bded-4d9116909bcd",
      "name": "HTTP Request",
      "credentials": {
        "oAuth2Api": {
          "id": "vEvzsxHcIYtkc5gM",
          "name": "Unnamed credential 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn JSON.parse($input.first().json.data)"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        32
      ],
      "id": "21b03c24-50f0-4588-990d-cc4f08653966",
      "name": "Code in JavaScript"
    },
    {
      "parameters": {
        "jsCode": "// Converts Amadeus /v2/shopping/flight-offers JSON into 1..N Telegram messages\n// Works with MarkdownV2 and formats times to Asia/Kolkata.\n// Input: $json has { data: [ flight-offer, ... ] } (like your sample)\n// Output item fields for Telegram node:\n//   chat_id, text, parse_mode, reply_markup\n\nconst CHAT_ID = $json.chatId || $json.chat_id || '<PUT_USER_CHAT_ID>'; // e.g. from Telegram Trigger or hardcode\nconst tz = 'Asia/Kolkata';\nconst MAX_OFFERS =$input.first().json.meta.count ; // change if you want more/less\nconst offers = Array.isArray($json?.data) ? $json.data : [];\n\n// ---------- helpers ----------\nconst fmtDT = (iso) => {\n  if (!iso) return '';\n  try {\n    const d = new Date(iso);\n    const date = new Intl.DateTimeFormat('en-GB', { day: '2-digit', month: 'short', timeZone: tz }).format(d);\n    const time = new Intl.DateTimeFormat('en-GB', { hour: 'numeric', minute: '2-digit', hour12: true, timeZone: tz }).format(d);\n    return `${date}, ${time} IST`;\n  } catch { return iso; }\n};\n\n// Telegram MarkdownV2 escaping\nconst esc = (s = '') => String(s).replace(/([_*\\[\\]()~`>#+\\-=|{}.!\\\\])/g, '\\\\$1');\n\n// Build per-offer text\nfunction buildText(offer) {\n  const offerId = offer.id || '';\n  const seats = offer.numberOfBookableSeats ?? 'N/A';\n  const lastTicket = offer.lastTicketingDateTime || offer.lastTicketingDate || '—';\n  const price = offer.price || {};\n  const total = price.total ?? price.grandTotal ?? 'N/A';\n  const currency = price.currency || '';\n  const base = price.base ?? '';\n  const itin = offer.itineraries?.[0] || {};\n  const duration = itin.duration || '';\n  const segs = itin.segments || [];\n  const first = segs[0] || {};\n  const dep = first.departure || {};\n  const arr = first.arrival || {};\n  const carrier = first.carrierCode || offer.validatingAirlineCodes?.[0] || '';\n  const flightNo = first.number || '';\n  const stops = first.numberOfStops ?? 0;\n\n  // fare/bags (first traveler, first seg)\n  const tp0 = offer.travelerPricings?.[0] || {};\n  const fd0 = tp0.fareDetailsBySegment?.[0] || {};\n  const cabin = fd0.cabin || '';\n  const branded = fd0.brandedFareLabel || fd0.brandedFare || '';\n  let checked = 'N/A';\n  if (fd0.includedCheckedBags?.weight) {\n    checked = `${fd0.includedCheckedBags.weight}${fd0.includedCheckedBags.weightUnit || ''}`;\n  } else if (fd0.includedCheckedBags?.quantity) {\n    checked = `${fd0.includedCheckedBags.quantity}pc`;\n  }\n  const amenities = (fd0.amenities || []).map(a => a?.description).filter(Boolean).join(', ') || '—';\n\n  // multi-segment line (if any)\n  const segLines = segs.map((s, idx) => {\n    const d = s.departure || {}, a = s.arrival || {};\n    return `S${idx+1}: ${esc(d.iataCode || '')} → ${esc(a.iataCode || '')}  (${esc(fmtDT(d.at))} → ${esc(fmtDT(a.at))})`;\n  }).join('\\n');\n\n  return [\n    `Flight #${esc(offerId)} — *${esc(carrier)} ${esc(flightNo)}*`,\n    `Route: \\`${esc(dep.iataCode || '')}${dep.terminal ? esc(' (T' + dep.terminal + ')') : ''} ➜ ${esc(arr.iataCode || '')}${arr.terminal ? esc(' (T' + arr.terminal + ')') : ''}\\``,\n    `Date / Time: *${esc(fmtDT(dep.at))} ➜ ${esc(fmtDT(arr.at))}*`,\n    `Duration: *${esc(duration)}* • Stops: *${esc(stops)}*`,\n    `Class: *${esc(cabin)}* (${esc(branded)}) • Seats: *${esc(seats)}*`,\n    segs.length > 1 ? `\\n${segLines}` : ``,\n    ``,\n    `*Price:* \\`${esc(total)} ${esc(currency)}\\` (base \\`${esc(base)}\\`)`,\n    `Baggage: Checked *${esc(checked)}*`,\n    `Amenities: ${esc(amenities)}`,\n    ``,\n    `_Validity / Ticketing_: Last ticketing date *${esc(lastTicket)}*`\n  ].filter(Boolean).join('\\n');\n}\n\n// ---------- build output ----------\nconst picked = offers.slice(0, MAX_OFFERS); // or sort by cheapest before slicing\n\nif (!picked.length) {\n  return [{ json: { chat_id: CHAT_ID, text: 'No flight offers found.', parse_mode: 'MarkdownV2' }}];\n}\n\nreturn picked.map(offer => {\n  const text = buildText(offer);\n  const reply_markup = {\n    inline_keyboard: [\n      [\n        { text: 'Book this flight', url: `https://your-booking.link/book?offerId=${encodeURIComponent(offer.id)}` },\n        { text: 'More details', callback_data: `details|${offer.id}` }\n      ]\n    ]\n  };\n  return { json: { chat_id: CHAT_ID, text, parse_mode: 'MarkdownV2', reply_markup } };\n});\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        512,
        32
      ],
      "id": "0bd5b7f5-3e6a-4362-bf04-ea79f65d96c3",
      "name": "Code in JavaScript1"
    },
    {
      "parameters": {
        "chatId": "={{ $('Telegram Trigger').item.json.message.chat.id }}",
        "text": "={{ $json.text }}",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        720,
        32
      ],
      "id": "c3ff93ea-7d62-4538-8107-c7cae7a66296",
      "name": "Send a text message1",
      "webhookId": "3d9eb2ec-b672-4727-a82e-657ab58023d7",
      "credentials": {
        "telegramApi": {
          "id": "Th2q5wcF5oxjmCVG",
          "name": "Telegram account 4"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.euron.one/api/v1/euri/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer euri-7613195240760a64b033ca7e119188fd623f22e30def5348c08eb581baf0fb5f"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \" {{ $json.message.text }} try understanding user input ,my user is trying to serach for flight and user have mentioned may be a origin and destination location in there own way do one thing parse the data and return a a simple string with origin code , destination code and date in yyyy-mm-dd format just as a strring and even try to check user message and understand for how many person user is planning to book a flight and return that in the same string if such information is not avaible then give me some helpfull amainzg beautifull message as a return\"\n    }\n  ],\n  \"model\": \"gpt-4.1-nano\",\n  \"max_tokens\": 500,\n  \"temperature\": 0.3\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -672,
        -112
      ],
      "id": "13b9e753-cae3-47af-86f3-80532f22f80e",
      "name": "HTTP Request1"
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Send a text message",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code in JavaScript",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript": {
      "main": [
        [
          {
            "node": "Code in JavaScript1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code in JavaScript1": {
      "main": [
        [
          {
            "node": "Send a text message1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c7c5ffdd-d16c-4ae6-bcb5-c542e0745333",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "5803b12455e37b4e61e6adfd91f47bf7633ccace7711bf26397316ff159df6b5"
  },
  "id": "kzqHSu6RDk6cXQtq",
  "tags": []
}